substitutions:
  name: "core400s-debug"
  upper_name: Core 400s Debug
  init: 'component_core400sUART::instance(id(uart_mcu2esp));'

esphome:
  name: ${name}
  includes:
    - esphome-levoit-core400s.h
  project: 
    name: "Levoit.Core400s"
    version: "0.2.0"
    
esp32:
  board: esp32dev
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_FREERTOS_UNICORE: y
      
logger:
  baud_rate: 115200

# Enable Home Assistant API
api:
  encryption:
    key: !secret esp_home_core400s_debug_noise

ota:
  password: !secret esp_home_ota_pw

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  
  # Optional manual IP
  manual_ip:
    static_ip: 192.168.0.200
    gateway: 192.168.0.9
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  #ap:
  #  ssid: ${upper_name} Fallback Hotspot
  #  password: !secret esp_home_captive_pw

#captive_portal:

# Sync time with Home Assistant.
time:
  - platform: homeassistant
    id: homeassistant_time

uart:
  - id: uart_mcu2esp
    tx_pin: 
      number: GPIO17
      inverted: false
    rx_pin: 
      number: GPIO16
      inverted: false
    baud_rate: 115200
    debug:
      direction: BOTH
      after:
          timeout: 50ms
      sequence:
        - lambda:  UARTDebug::log_hex(direction, bytes, ':');        
        
custom_component:
  - lambda: |-
      auto c_core400_uart = ${init}
      return {c_core400_uart};

sensor:
  # Uptime sensor.
  - platform: uptime
    name: ${upper_name} Uptime

  # WiFi Signal sensor.
  - platform: wifi_signal
    name: ${upper_name} WiFi Signal
    update_interval: 60s

  - platform: custom
    lambda: |-
      auto c_core400_uart = ${init}
      return {
        c_core400_uart->sensor_pm25,
        c_core400_uart->sensor_roomSize
      };
    sensors:
      - name: ${upper_name} PM25
        accuracy_decimals: 1
        icon: mdi:air-filter
        unit_of_measurement: µg/m³
        # filters:
        #   - throttle: 50s
        #   - median:
        #       window_size: 4
        #       send_every: 1
        #       send_first_at: 1
      - name: ${upper_name} Room Size
        accuracy_decimals: 0
        icon: mdi:axis-arrow
        entity_category: config
        
# Text sensors with general information.
text_sensor:
  # Expose WiFi information as sensors.
  - platform: wifi_info
    ip_address:
      name: ${upper_name} IP

  - platform: custom
    lambda: |-
        auto c_core400_uart = ${init}
        return {
          c_core400_uart->textsensor_fanSpeed,
          c_core400_uart->textsensor_Power,
          c_core400_uart->textsensor_FanMode,
          c_core400_uart->textsensor_DisplayLit,
          c_core400_uart->textsensor_DisplayLocked,
          c_core400_uart->textsensor_FanAutoMode, 
          c_core400_uart->textsensor_mcuFW
        };
           
    text_sensors:
        - name: ${upper_name} Fan Speed
          icon: mdi:fan
        - name: ${upper_name} Power
          icon: mdi:power
        - name: ${upper_name} FanMode
          icon: mdi:fan
        - name: ${upper_name} DisplayLit
          icon: mdi:lightbulb-on-50
        - name: ${upper_name} Display Locked
          icon: mdi:lock
        - name: ${upper_name} Fan Auto Mode
          icon: mdi:fan-auto
        - name: ${upper_name} FW
          icon: mdi:select-inverse
          entity_category:  diagnostic

button:
  #HA button to restart.
  - platform: restart
    name: ${upper_name} Restart
  - platform: template
    name: "Power On"
    on_press:
      lambda: |-
        auto c_core400_uart = ${init}
        c_core400_uart->power_on();
  - platform: template
    name: "Power Off"
    on_press:
      lambda: |-
        auto c_core400_uart = ${init}
        c_core400_uart->power_off();   
  - platform: template
    name: "Set Fan Manual Turbo"
    on_press:
      lambda: |-
        auto c_core400_uart = ${init}
        c_core400_uart->set_fan_manual_turbo(); 
  - platform: template
    name: "Set Fan Manual High"
    on_press:
      lambda: |-
        auto c_core400_uart = ${init}
        c_core400_uart->set_fan_manual_high();
  - platform: template
    name: "Set Fan Manual Medium"
    on_press:
      lambda: |-
        auto c_core400_uart = ${init}
        c_core400_uart->set_fan_manual_medium();   
  - platform: template
    name: "Set Fan Manual Low"
    on_press:
      lambda: |-
        auto c_core400_uart = ${init}
        c_core400_uart->set_fan_manual_low();  
  - platform: template
    name: "Set Fan Mode Manual"
    on_press:
      lambda: |-
        auto c_core400_uart = ${init}
        c_core400_uart->set_fan_mode_manual();
  - platform: template
    name: "Set Fan Mode Sleep"
    on_press:
      lambda: |-
        auto c_core400_uart = ${init}
        c_core400_uart->set_fan_mode_sleep();
  - platform: template
    name: "Set Fan Mode Auto"
    on_press:
      lambda: |-
        auto c_core400_uart = ${init}
        c_core400_uart->set_fan_mode_auto();               
  - platform: template
    name: "Lock Display"
    on_press:
      lambda: |-
        auto c_core400_uart = ${init}
        c_core400_uart->lock_display();  
  - platform: template
    name: "Unlock Display"
    on_press:
      lambda: |-
        auto c_core400_uart = ${init}
        c_core400_uart->unlock_display();
  - platform: template
    name: "Display On"
    on_press:
      lambda: |-
        auto c_core400_uart = ${init}
        c_core400_uart->display_on();   
  - platform: template
    name: "Display Off"
    on_press:
      lambda: |-
        auto c_core400_uart = ${init}
        c_core400_uart->display_off();  
  - platform: template
    name: "wifi_led_off"
    on_press:
      lambda: |-
        auto c_core400_uart = ${init}
        c_core400_uart->wifi_led_off();
  - platform: template
    name: "wifi_led_flash"
    on_press:
      lambda: |-
        auto c_core400_uart = ${init}
        c_core400_uart->wifi_led_flash();   
  - platform: template
    name: "wifi_led_on"
    on_press:
      lambda: |-
        auto c_core400_uart = ${init}
        c_core400_uart->wifi_led_on();      
  - platform: template
    name: "Filter Led On"
    on_press:
      lambda: |-
        auto c_core400_uart = ${init}
        c_core400_uart->filter_led_on();   
  - platform: template
    name: "Filter Led Off"
    on_press:
      lambda: |-
        auto c_core400_uart = ${init}
        c_core400_uart->filter_led_off();                                
  - platform: template
    name: "Fan Auto PPM"
    on_press:
      lambda: |-
        auto c_core400_uart = ${init}
        c_core400_uart->set_fan_auto_ppm();      
  - platform: template
    name: "Fan Auto PPM Quiet"
    on_press:
      lambda: |-
        auto c_core400_uart = ${init}
        c_core400_uart->set_fan_auto_ppmQuiet();   
  - platform: template
    name: "Fan Auto RoomSize"
    on_press:
      lambda: |-
        auto c_core400_uart = ${init}
        c_core400_uart->set_fan_auto_area(); 

interval:
  - interval: 1s
    then:
      if:
        condition:
          wifi.connected:
        then:
          - lambda: |-
              auto c_core400_uart = ${init}
              c_core400_uart->wifi_led_on();  
        else:
          - lambda: |-
              auto c_core400_uart = ${init}
              c_core400_uart->wifi_led_off();  